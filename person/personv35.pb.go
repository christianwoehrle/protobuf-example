// Code generated by protoc-gen-go. DO NOT EDIT.
// source: personv35.proto

/*
Package person is a generated protocol buffer package.

It is generated from these files:
	personv35.proto

It has these top-level messages:
	Person
	PersonList
*/
package person

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Person struct {
	Name  *Person_Name    `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Email []*Person_Email `protobuf:"bytes,2,rep,name=email" json:"email,omitempty"`
}

func (m *Person) Reset()                    { *m = Person{} }
func (m *Person) String() string            { return proto.CompactTextString(m) }
func (*Person) ProtoMessage()               {}
func (*Person) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Person) GetName() *Person_Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Person) GetEmail() []*Person_Email {
	if m != nil {
		return m.Email
	}
	return nil
}

type Person_Name struct {
	Family   string `protobuf:"bytes,1,opt,name=family" json:"family,omitempty"`
	Personal string `protobuf:"bytes,2,opt,name=personal" json:"personal,omitempty"`
}

func (m *Person_Name) Reset()                    { *m = Person_Name{} }
func (m *Person_Name) String() string            { return proto.CompactTextString(m) }
func (*Person_Name) ProtoMessage()               {}
func (*Person_Name) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *Person_Name) GetFamily() string {
	if m != nil {
		return m.Family
	}
	return ""
}

func (m *Person_Name) GetPersonal() string {
	if m != nil {
		return m.Personal
	}
	return ""
}

type Person_Email struct {
	Kind    string `protobuf:"bytes,1,opt,name=kind" json:"kind,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
}

func (m *Person_Email) Reset()                    { *m = Person_Email{} }
func (m *Person_Email) String() string            { return proto.CompactTextString(m) }
func (*Person_Email) ProtoMessage()               {}
func (*Person_Email) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

func (m *Person_Email) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *Person_Email) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type PersonList struct {
	Persons []*Person `protobuf:"bytes,1,rep,name=persons" json:"persons,omitempty"`
}

func (m *PersonList) Reset()                    { *m = PersonList{} }
func (m *PersonList) String() string            { return proto.CompactTextString(m) }
func (*PersonList) ProtoMessage()               {}
func (*PersonList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PersonList) GetPersons() []*Person {
	if m != nil {
		return m.Persons
	}
	return nil
}

func init() {
	proto.RegisterType((*Person)(nil), "person.Person")
	proto.RegisterType((*Person_Name)(nil), "person.Person.Name")
	proto.RegisterType((*Person_Email)(nil), "person.Person.Email")
	proto.RegisterType((*PersonList)(nil), "person.PersonList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PersonService service

type PersonServiceClient interface {
	Echo(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Person, error)
}

type personServiceClient struct {
	cc *grpc.ClientConn
}

func NewPersonServiceClient(cc *grpc.ClientConn) PersonServiceClient {
	return &personServiceClient{cc}
}

func (c *personServiceClient) Echo(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Person, error) {
	out := new(Person)
	err := grpc.Invoke(ctx, "/person.PersonService/Echo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PersonService service

type PersonServiceServer interface {
	Echo(context.Context, *Person) (*Person, error)
}

func RegisterPersonServiceServer(s *grpc.Server, srv PersonServiceServer) {
	s.RegisterService(&_PersonService_serviceDesc, srv)
}

func _PersonService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/person.PersonService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).Echo(ctx, req.(*Person))
	}
	return interceptor(ctx, in, info, handler)
}

var _PersonService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "person.PersonService",
	HandlerType: (*PersonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _PersonService_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "personv35.proto",
}

func init() { proto.RegisterFile("personv35.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x41, 0x4b, 0x03, 0x31,
	0x14, 0x84, 0x5d, 0xdd, 0xa6, 0xfa, 0x8a, 0x0a, 0x4f, 0x91, 0x90, 0x53, 0xd9, 0x8b, 0xc1, 0x43,
	0x0e, 0x5b, 0x2a, 0xe8, 0xbd, 0x37, 0x11, 0x89, 0xbf, 0x20, 0x76, 0x23, 0x06, 0x9b, 0x4d, 0x49,
	0x4a, 0xc1, 0x7f, 0xe9, 0x4f, 0x92, 0xe4, 0x6d, 0x85, 0xee, 0x2d, 0xf3, 0x66, 0xbe, 0x61, 0x08,
	0x5c, 0x6f, 0x6d, 0x4c, 0xa1, 0xdf, 0x2f, 0x96, 0x6a, 0x1b, 0xc3, 0x2e, 0x20, 0xa3, 0x43, 0xf3,
	0x5b, 0x01, 0x7b, 0x2b, 0x4f, 0xbc, 0x87, 0xba, 0x37, 0xde, 0xf2, 0x6a, 0x5e, 0xc9, 0x59, 0x7b,
	0xa3, 0x28, 0xa1, 0xc8, 0x55, 0xaf, 0xc6, 0x5b, 0x5d, 0x02, 0xf8, 0x00, 0x13, 0xeb, 0x8d, 0xdb,
	0xf0, 0xd3, 0xf9, 0x99, 0x9c, 0xb5, 0xb7, 0xa3, 0xe4, 0x2a, 0x7b, 0x9a, 0x22, 0xe2, 0x19, 0xea,
	0x4c, 0xe2, 0x1d, 0xb0, 0x4f, 0xe3, 0xdd, 0xe6, 0xa7, 0xd4, 0x5f, 0xe8, 0x41, 0xa1, 0x80, 0x73,
	0xa2, 0x4d, 0xae, 0xcb, 0xce, 0xbf, 0x16, 0x4b, 0x98, 0x94, 0x2e, 0x44, 0xa8, 0xbf, 0x5d, 0xdf,
	0x0d, 0x68, 0x79, 0x23, 0x87, 0xa9, 0xe9, 0xba, 0x68, 0x53, 0x1a, 0xb8, 0x83, 0x6c, 0x1e, 0x01,
	0x68, 0xc9, 0x8b, 0x4b, 0x3b, 0x94, 0x30, 0xa5, 0xc2, 0xc4, 0xab, 0x32, 0xf7, 0xea, 0x78, 0xae,
	0x3e, 0xd8, 0xed, 0x13, 0x5c, 0xd2, 0xe9, 0xdd, 0xc6, 0xbd, 0x5b, 0x5b, 0x94, 0x50, 0xaf, 0xd6,
	0x5f, 0x01, 0x47, 0x84, 0x18, 0xe9, 0xe6, 0xe4, 0x83, 0x95, 0x4f, 0x5d, 0xfc, 0x05, 0x00, 0x00,
	0xff, 0xff, 0x9b, 0xd3, 0xc6, 0xe9, 0x67, 0x01, 0x00, 0x00,
}
